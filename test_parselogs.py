import unittest
from parselogs import Measure, is_region_line, is_date_line, get_date, get_region_count, parselogs

class ParselogsTest(unittest.TestCase):
    def test_is_region_line(self):
        self.assertTrue(is_region_line('üî∏–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å - 460'))
        self.assertFalse(is_region_line('Stepan Kuznetsov, [13.04.20 12:21]'))
        self.assertFalse(is_region_line('–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ –≤ –†–æ—Å—Å–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ 2774 –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞—è –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞ –≤ 51 —Ä–µ–≥–∏–æ–Ω–µ, –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ 22 –ª–µ—Ç–∞–ª—å–Ω—ã—Ö –∏—Å—Ö–æ–¥–∞. –ó–∞ —Å—É—Ç–∫–∏ –ø–æ –†–æ—Å—Å–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–∑–¥–æ—Ä–æ–≤–µ–ª–∏ 224 —á–µ–ª–æ–≤–µ–∫–∞.'))

    def test_is_date_line(self):
        self.assertFalse(is_date_line('üî∏–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å - 460'))
        self.assertTrue(is_date_line('Stepan Kuznetsov, [13.04.20 12:21]'))
        self.assertFalse(is_date_line('–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ –≤ –†–æ—Å—Å–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ 2774 –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞—è –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞ –≤ 51 —Ä–µ–≥–∏–æ–Ω–µ, –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ 22 –ª–µ—Ç–∞–ª—å–Ω—ã—Ö –∏—Å—Ö–æ–¥–∞. –ó–∞ —Å—É—Ç–∫–∏ –ø–æ –†–æ—Å—Å–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–∑–¥–æ—Ä–æ–≤–µ–ª–∏ 224 —á–µ–ª–æ–≤–µ–∫–∞.'))

    def test_get_date(self):
        self.assertEqual('2020-04-13', get_date('Stepan Kuznetsov, [13.04.20 12:21]'))

    def test_get_region_and_count(self):
        (region, count) = get_region_count('üî∏–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å - 460')
        self.assertEqual('–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', region)
        self.assertEqual(460, count)
        # issue #4
        count = get_region_count('üî∏–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å -460')[1]
        self.assertEqual(460, count)
        # issue 4 with hanging space
        count = get_region_count('üî∏–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π -3 ')[1]
        self.assertEqual(count, 3)

    def test_parselogs(self):
        parse_result = parselogs('data/test.txt')
        expected = [
            Measure('–ú–æ—Å–∫–≤–∞', '2020-04-15', 1355), Measure('–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '2020-04-15', 6),
            Measure('–ú–æ—Å–∫–≤–∞', '2020-04-13', 1489), Measure('–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '2020-04-13', 460)]
        self.assertCountEqual(parse_result, expected)


if __name__ == '__main__':
    unittest.main()